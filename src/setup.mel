// function to get position on sphere from angles
proc vector getPosOnSphere(float $r, float $theta, float $phi) {
  vector $pos = <<  $r*cos($theta)*sin($phi),
                    $r*sin($theta)*sin($phi),
                    $r*cos($phi) >>;
  return $pos;
}

createNode FurrySystemNode -n furry;
connectAttr time1.outTime furry.time;

// create sphere
CreateNURBSSphere;
// Connect sphere world matrix to our plugin
connectAttr nurbsSphere1.worldMatrix furry.input_sphere_matrix;

float $length = 10.0;
int $nrOfKnots = 4;
float $radius = 1.0;
int $nrOfCurves = 20;
int $currentStrandIndex = 0;
float $angleIterTheta = 2*3.14 / $nrOfCurves;
float $angleIterPhi = 3.14 / $nrOfCurves;

// loop around z-axis
for ($i=0; $i<$nrOfCurves; ++$i) {
  // loop over sphere
  for ($j=0; $j<$nrOfCurves; ++$j) {
    //get current index
    $currentStrandIndex = $j + $nrOfCurves*$i;

    // create output curve
    $outC = ( "outputcurve" + $currentStrandIndex ) ;
    createNode nurbsCurve -n $outC;
    connectAttr furry.output_curves[$currentStrandIndex] ($outC+".create");

    // get startPos for strand on sphere
    vector $startPos = getPosOnSphere($radius, $i*$angleIterTheta, $j*$angleIterPhi);

    float $x = $startPos.x;
    float $y = $startPos.y;
    float $z = $startPos.z;

    string $createCurveString = "curve -p " + $x + " " + $y + " " + $z;
    for ($k=0; $k < $nrOfKnots - 1; ++$k) {
      float $x = $startPos.x * $length / ($nrOfKnots-1) * ($k + 1);
      float $y = $startPos.y * $length / ($nrOfKnots-1) * ($k + 1);
      float $z = $startPos.z * $length / ($nrOfKnots-1) * ($k + 1);
      $createCurveString = $createCurveString + " -p " + $x + " " + $y + " " + $z;
    }

    // Create follicle and attach to sphere
    string $currentFollicle = ("follicle" + ($currentStrandIndex+1));
    createNode transform -n $currentFollicle -p nurbsSphere1;

    // Assume world coordinates and sphere in origin
    move $x $y $z;

    //Create a curve and connect it to the hair system as input shape
    eval($createCurveString);

    string $s = ("curveShape" + ($currentStrandIndex+1) + ".intermediateObject");
    setAttr $s 1;

    string $c = ( "curveShape" + ($currentStrandIndex+1) ) ;
    connectAttr ($c + ".local") furry.input_curves[$currentStrandIndex];
    connectAttr ($currentFollicle + ".worldMatrix") furry.input_follicles[$currentStrandIndex];
  }

};
